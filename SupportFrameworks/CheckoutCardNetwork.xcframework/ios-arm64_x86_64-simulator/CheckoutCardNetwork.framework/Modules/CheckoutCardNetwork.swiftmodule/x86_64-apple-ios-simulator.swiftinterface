// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CheckoutCardNetwork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CryptoKit
import Foundation
import PassKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct CardDigitizationData {
  public let state: CheckoutCardNetwork.CardDigitizationState
  public let localPKPass: PassKit.PKPass?
  public let remotePKPass: PassKit.PKPass?
}
public enum CardDigitizationState : Swift.String, Swift.Decodable {
  case digitized
  case notDigitized
  case pendingIDVLocal
  case pendingIDVRemote
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardDigitizationResult {
  case success(CheckoutCardNetwork.CardDigitizationData)
  case failure(CheckoutCardNetwork.CardNetworkError)
}
public enum CardDetailCopyResult {
  case success
  case failure(CheckoutCardNetwork.CardNetworkError)
}
@_hasMissingDesignatedInitializers final public class CheckoutCardService : CheckoutCardNetwork.CardService {
  public static var version: CheckoutCardNetwork.CardServiceVersion
  weak final public var logger: (any CheckoutCardNetwork.NetworkLogger)? {
    get
    set
  }
  required convenience public init(environment: CheckoutCardNetwork.CardNetworkEnvironment)
  final public func isTokenValid(_ token: CheckoutCardNetwork.Token) -> Swift.Bool
  final public func getCards(sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.CardListResult) -> Swift.Void))
  final public func createCard(from cardModel: CheckoutCardNetwork.CardCreationModel, sessionToken: Swift.String, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.CardResult) -> Swift.Void))
  @objc deinit
}
public struct CardCreationModel : Swift.Encodable {
  public init(type: CheckoutCardNetwork.CardType, cardholderID: Swift.String, lifetime: Swift.Int?, reference: Swift.String?, cardProductID: Swift.String?, displayName: Swift.String, shippingInstructions: CheckoutCardNetwork.CardShippingInstructions?, isSingleUse: Swift.Bool?, isCreatedActive: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct SecurityCodeViewConfiguration {
  public init(font: UIKit.UIFont, textColor: UIKit.UIColor)
}
public struct WalletCardDetails {
  public let cardId: Swift.String
  public let cardTitle: Swift.String
  public let cardArt: UIKit.UIImage
  public init(cardId: Swift.String, cardTitle: Swift.String, cardArt: UIKit.UIImage)
}
extension CheckoutCardNetwork.CheckoutCardService {
  final public func configurePushProvisioning(cardholderID: Swift.String, appGroupId: Swift.String, configuration: CheckoutCardNetwork.ProvisioningConfiguration, walletCardsList: [CheckoutCardNetwork.WalletCardDetails], completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  final public func getCardDigitizationState(cardID: Swift.String, token: Swift.String, completionHandler: @escaping ((CheckoutCardNetwork.CardDigitizationResult) -> Swift.Void))
  final public func addCardToAppleWallet(cardID: Swift.String, token: Swift.String, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
}
@objc @_inheritsConvenienceInitializers @available(iOS 14.0, *)
open class NonUiProvisioningExtensionHandler : PassKit.PKIssuerProvisioningExtensionHandler {
  public func initLogger(logger: any CheckoutCardNetwork.NetworkLogger)
  @objc override dynamic open func status(completion: @escaping (PassKit.PKIssuerProvisioningExtensionStatus) -> Swift.Void)
  @objc override dynamic open func passEntries(completion: @escaping ([PassKit.PKIssuerProvisioningExtensionPassEntry]) -> Swift.Void)
  @objc override dynamic open func remotePassEntries(completion: @escaping ([PassKit.PKIssuerProvisioningExtensionPassEntry]) -> Swift.Void)
  @objc override dynamic open func generateAddPaymentPassRequestForPassEntryWithIdentifier(_ identifier: Swift.String, configuration: PassKit.PKAddPaymentPassRequestConfiguration, certificateChain certificates: [Foundation.Data], nonce: Foundation.Data, nonceSignature: Foundation.Data, completionHandler completion: @escaping (PassKit.PKAddPaymentPassRequest?) -> Swift.Void)
  open func onError(_ error: CheckoutCardNetwork.CardNetworkError.ProvisioningExtensionFailure)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
public protocol UiProvisioningExtensionAuthorizationProviding : PassKit.PKIssuerProvisioningExtensionAuthorizationProviding {
}
@available(iOS 14.0, *)
extension CheckoutCardNetwork.UiProvisioningExtensionAuthorizationProviding {
  public func login(token: Swift.String, logger: any CheckoutCardNetwork.NetworkLogger, completion: @escaping (CheckoutCardNetwork.CardNetworkError.ProvisioningExtensionFailure?) -> Swift.Void)
}
public protocol CardService {
  typealias SecureResult = Swift.Result<UIKit.UIView, CheckoutCardNetwork.CardNetworkError>
  typealias SecurePropertiesResult = Swift.Result<(pan: UIKit.UIView, securityCode: UIKit.UIView), CheckoutCardNetwork.CardNetworkError>
  typealias CardResult = Swift.Result<CheckoutCardNetwork.Card, CheckoutCardNetwork.CardNetworkError>
  typealias CardListResult = Swift.Result<[CheckoutCardNetwork.Card], CheckoutCardNetwork.CardNetworkError>
  static var version: CheckoutCardNetwork.CardServiceVersion { get }
  var logger: (any CheckoutCardNetwork.NetworkLogger)? { get set }
  init(environment: CheckoutCardNetwork.CardNetworkEnvironment)
  func isTokenValid(_ token: CheckoutCardNetwork.Token) -> Swift.Bool
  func displayPin(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.PinViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((Self.SecureResult) -> Swift.Void))
  func displayPan(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.PanViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((Self.SecureResult) -> Swift.Void))
  func copyPan(forCard cardID: Swift.String, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CardDetailCopyResult) -> Swift.Void))
  func displaySecurityCode(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.SecurityCodeViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((Self.SecureResult) -> Swift.Void))
  func displayPanAndSecurityCode(forCard cardID: Swift.String, panViewConfiguration: CheckoutCardNetwork.PanViewConfiguration, securityCodeViewConfiguration: CheckoutCardNetwork.SecurityCodeViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((Self.SecurePropertiesResult) -> Swift.Void))
  func activateCard(cardID: Swift.String, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  func suspendCard(cardID: Swift.String, reason: CheckoutCardNetwork.CardSuspendReason?, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  func revokeCard(cardID: Swift.String, reason: CheckoutCardNetwork.CardRevokeReason?, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  func getCards(sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((Self.CardListResult) -> Swift.Void))
  func createCard(from cardModel: CheckoutCardNetwork.CardCreationModel, sessionToken: Swift.String, completionHandler: @escaping ((Self.CardResult) -> Swift.Void))
  func configurePushProvisioning(cardholderID: Swift.String, appGroupId: Swift.String, configuration: CheckoutCardNetwork.ProvisioningConfiguration, walletCardsList: [CheckoutCardNetwork.WalletCardDetails], completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  func getCardDigitizationState(cardID: Swift.String, token: Swift.String, completionHandler: @escaping ((CheckoutCardNetwork.CardDigitizationResult) -> Swift.Void))
  func addCardToAppleWallet(cardID: Swift.String, token: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
}
public struct CardServiceVersion {
  public let name: Swift.String
  public let number: Swift.String
}
public struct PanViewConfiguration {
  public init(font: UIKit.UIFont, textColor: UIKit.UIColor, formatSeparator: Swift.String)
}
public struct CardShippingInstructions : Swift.Encodable {
  public init(recipient: Swift.String, address: CheckoutCardNetwork.CardShippingInstructions.Address, comments: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
}
extension CheckoutCardNetwork.CardShippingInstructions {
  public struct Address : Swift.Encodable {
    public init(addressLine1: Swift.String, addressLine2: Swift.String?, city: Swift.String, state: Swift.String?, postCode: Swift.String, countryCode: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
public struct Card : Swift.Decodable, Swift.Equatable {
  public let id: Swift.String
  public let displayName: Swift.String
  public let expiryDate: CheckoutCardNetwork.CardExpiryDate
  public let panLast4Digits: Swift.String
  public let state: CheckoutCardNetwork.CardState
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: CheckoutCardNetwork.Card, b: CheckoutCardNetwork.Card) -> Swift.Bool
}
public enum CardType : Swift.String, Swift.Codable {
  case physical
  case virtual
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ProvisioningConfiguration : Swift.Codable {
  public let issuerID: Swift.String
  public let serviceRSAExponent: Foundation.Data
  public let serviceRSAModulus: Foundation.Data
  public let serviceURLString: Swift.String
  public let digitalServiceURLString: Swift.String
  public init(issuerID: Swift.String, serviceRSAExponent: Foundation.Data, serviceRSAModulus: Foundation.Data, serviceURLString: Swift.String, digitalServiceURLString: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CardSuspendReason : Swift.String {
  case lost
  case stolen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardState : Swift.String, Swift.Decodable {
  case active
  case inactive
  case suspended
  case revoked
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardNetworkError : Swift.Error, Swift.Equatable {
  public enum PushProvisioningFailure : Swift.Error, Swift.Equatable {
    case cancelled
    case configurationFailure
    case operationFailure(hint: Swift.String)
    public static func == (a: CheckoutCardNetwork.CardNetworkError.PushProvisioningFailure, b: CheckoutCardNetwork.CardNetworkError.PushProvisioningFailure) -> Swift.Bool
  }
  public enum ProvisioningExtensionFailure : Swift.Error, Swift.Equatable {
    case walletExtensionAppGroupIDNotFound
    case cardNotFound
    case deviceEnvironmentUnsafe
    case operationFailure
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CheckoutCardNetwork.CardNetworkError.ProvisioningExtensionFailure, b: CheckoutCardNetwork.CardNetworkError.ProvisioningExtensionFailure) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DigitizationStateFailure : Swift.Error, Swift.Equatable {
    case configurationFailure
    case operationFailure
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CheckoutCardNetwork.CardNetworkError.DigitizationStateFailure, b: CheckoutCardNetwork.CardNetworkError.DigitizationStateFailure) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CopySensitiveDataError : Swift.Error, Swift.Equatable {
    case copyFailure
    case dataNotViewed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CheckoutCardNetwork.CardNetworkError.CopySensitiveDataError, b: CheckoutCardNetwork.CardNetworkError.CopySensitiveDataError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  case authenticationFailure
  case deviceNotSupported
  case insecureDevice
  case invalidRequest(hint: Swift.String)
  case invalidRequestInput
  case misconfigured(hint: Swift.String)
  case serverIssue
  case unauthenticated
  case secureOperationsFailure
  case parsingFailure
  case pushProvisioningFailure(failure: CheckoutCardNetwork.CardNetworkError.PushProvisioningFailure)
  case fetchDigitizationStateFailure(failure: CheckoutCardNetwork.CardNetworkError.DigitizationStateFailure)
  case unableToCopy(failure: CheckoutCardNetwork.CardNetworkError.CopySensitiveDataError)
  public static func == (a: CheckoutCardNetwork.CardNetworkError, b: CheckoutCardNetwork.CardNetworkError) -> Swift.Bool
}
extension CheckoutCardNetwork.CheckoutCardService {
  final public func activateCard(cardID: Swift.String, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  final public func suspendCard(cardID: Swift.String, reason: CheckoutCardNetwork.CardSuspendReason?, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
  final public func revokeCard(cardID: Swift.String, reason: CheckoutCardNetwork.CardRevokeReason?, sessionToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.OperationResult) -> Swift.Void))
}
public struct CardExpiryDate : Swift.Equatable {
  public let month: Swift.String
  public let year: Swift.String
  public static func == (a: CheckoutCardNetwork.CardExpiryDate, b: CheckoutCardNetwork.CardExpiryDate) -> Swift.Bool
}
extension CheckoutCardNetwork.CheckoutCardService {
  final public func displayPin(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.PinViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.SecureResult) -> Swift.Void))
  final public func displayPan(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.PanViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.SecureResult) -> Swift.Void))
  final public func displaySecurityCode(forCard cardID: Swift.String, displayConfiguration: CheckoutCardNetwork.SecurityCodeViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.SecureResult) -> Swift.Void))
  final public func displayPanAndSecurityCode(forCard cardID: Swift.String, panViewConfiguration: CheckoutCardNetwork.PanViewConfiguration, securityCodeViewConfiguration: CheckoutCardNetwork.SecurityCodeViewConfiguration, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CheckoutCardService.SecurePropertiesResult) -> Swift.Void))
  final public func copyPan(forCard cardID: Swift.String, singleUseToken: CheckoutCardNetwork.Token, completionHandler: @escaping ((CheckoutCardNetwork.CardDetailCopyResult) -> Swift.Void))
}
public protocol NetworkLogger : AnyObject {
  var sessionID: Swift.String { get }
  func log(error: any Swift.Error, additionalInfo: [Swift.String : Swift.String])
}
public typealias Token = Swift.String
public enum OperationResult : Swift.Equatable {
  case success
  case failure(CheckoutCardNetwork.CardNetworkError)
  public static func == (a: CheckoutCardNetwork.OperationResult, b: CheckoutCardNetwork.OperationResult) -> Swift.Bool
}
public enum CardNetworkEnvironment : Swift.String {
  case sandbox
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CardRevokeReason : Swift.String {
  case lost
  case stolen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PinViewConfiguration {
  public init(font: UIKit.UIFont, textColor: UIKit.UIColor)
}
extension CheckoutCardNetwork.CardDigitizationState : Swift.Equatable {}
extension CheckoutCardNetwork.CardDigitizationState : Swift.Hashable {}
extension CheckoutCardNetwork.CardDigitizationState : Swift.RawRepresentable {}
extension CheckoutCardNetwork.CardNetworkEnvironment : Swift.Equatable {}
extension CheckoutCardNetwork.CardNetworkEnvironment : Swift.Hashable {}
extension CheckoutCardNetwork.CardNetworkEnvironment : Swift.RawRepresentable {}
extension CheckoutCardNetwork.CardType : Swift.Equatable {}
extension CheckoutCardNetwork.CardType : Swift.Hashable {}
extension CheckoutCardNetwork.CardType : Swift.RawRepresentable {}
extension CheckoutCardNetwork.CardSuspendReason : Swift.Equatable {}
extension CheckoutCardNetwork.CardSuspendReason : Swift.Hashable {}
extension CheckoutCardNetwork.CardSuspendReason : Swift.RawRepresentable {}
extension CheckoutCardNetwork.CardState : Swift.Equatable {}
extension CheckoutCardNetwork.CardState : Swift.Hashable {}
extension CheckoutCardNetwork.CardState : Swift.RawRepresentable {}
extension CheckoutCardNetwork.CardNetworkError.ProvisioningExtensionFailure : Swift.Hashable {}
extension CheckoutCardNetwork.CardNetworkError.DigitizationStateFailure : Swift.Hashable {}
extension CheckoutCardNetwork.CardNetworkError.CopySensitiveDataError : Swift.Hashable {}
extension CheckoutCardNetwork.CardRevokeReason : Swift.Equatable {}
extension CheckoutCardNetwork.CardRevokeReason : Swift.Hashable {}
extension CheckoutCardNetwork.CardRevokeReason : Swift.RawRepresentable {}
