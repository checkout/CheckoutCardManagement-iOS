// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CheckoutEventLoggerKit
import Foundation
import Swift
import UIKit
import _Concurrency
public enum Environment {
  case sandbox
  case production
  public static func == (a: CheckoutEventLoggerKit.Environment, b: CheckoutEventLoggerKit.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension CheckoutEventLoggerKit._AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension CheckoutEventLoggerKit.AnyCodable : CheckoutEventLoggerKit._AnyEncodable, CheckoutEventLoggerKit._AnyDecodable {
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.Equatable {
  public static func == (lhs: CheckoutEventLoggerKit.AnyCodable, rhs: CheckoutEventLoggerKit.AnyCodable) -> Swift.Bool
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension CheckoutEventLoggerKit.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension CheckoutEventLoggerKit.AnyCodable {
  public static func add(customEquality: @escaping (_ lhs: Any, _ rhs: Any) -> Swift.Bool, customEncoding: @escaping (_ value: Any, _ container: inout Swift.SingleValueEncodingContainer) throws -> Swift.Bool)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension CheckoutEventLoggerKit._AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension CheckoutEventLoggerKit._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
public struct RemoteProcessorMetadata : Swift.Equatable {
  public init(productIdentifier: Swift.String, productVersion: Swift.String, environment: Swift.String, appPackageName: Swift.String, appPackageVersion: Swift.String, appInstallId: Swift.String, deviceName: Swift.String, platform: Swift.String, osVersion: Swift.String)
  public init(productIdentifier: Swift.String, productVersion: Swift.String, environment: Swift.String, appPackageName: Swift.String, appPackageVersion: Swift.String, deviceName: Swift.String, platform: Swift.String, osVersion: Swift.String)
  public static func == (a: CheckoutEventLoggerKit.RemoteProcessorMetadata, b: CheckoutEventLoggerKit.RemoteProcessorMetadata) -> Swift.Bool
}
public struct Event : Swift.Equatable {
  public let typeIdentifier: Swift.String
  public let time: Foundation.Date
  public let monitoringLevel: CheckoutEventLoggerKit.MonitoringLevel
  public var properties: [Swift.String : CheckoutEventLoggerKit.AnyCodable]
  public init(typeIdentifier: Swift.String, time: Foundation.Date, monitoringLevel: CheckoutEventLoggerKit.MonitoringLevel, properties: [Swift.String : CheckoutEventLoggerKit.AnyCodable])
  public static func == (a: CheckoutEventLoggerKit.Event, b: CheckoutEventLoggerKit.Event) -> Swift.Bool
}
extension CheckoutEventLoggerKit.RemoteProcessorMetadata {
  public init(productIdentifier: Swift.String, productVersion: Swift.String, environment: Swift.String)
}
public protocol CheckoutEventLogging {
  func log(event: CheckoutEventLoggerKit.Event)
  func add(metadata: Swift.String, value: Swift.String)
  func remove(metadata: Swift.String)
  func clearMetadata()
  func enableLocalProcessor(monitoringLevel: CheckoutEventLoggerKit.MonitoringLevel)
  func enableRemoteProcessor(environment: CheckoutEventLoggerKit.Environment, remoteProcessorMetadata: CheckoutEventLoggerKit.RemoteProcessorMetadata)
}
final public class CheckoutEventLogger : CheckoutEventLoggerKit.CheckoutEventLogging {
  public enum MetadataKey : Swift.String {
    case correlationID
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(productName: Swift.String)
  final public func enableLocalProcessor(monitoringLevel: CheckoutEventLoggerKit.MonitoringLevel)
  final public func enableRemoteProcessor(environment: CheckoutEventLoggerKit.Environment, remoteProcessorMetadata: CheckoutEventLoggerKit.RemoteProcessorMetadata)
  final public func add(metadata metadataKey: Swift.String, value: Swift.String)
  final public func remove(metadata metadataKey: Swift.String)
  final public func clearMetadata()
  final public func log(event: CheckoutEventLoggerKit.Event)
  @objc deinit
}
public enum MonitoringLevel : Swift.String, Swift.CaseIterable, Swift.Comparable {
  case debug
  case info
  case error
  case warn
  public static func < (lhs: CheckoutEventLoggerKit.MonitoringLevel, rhs: CheckoutEventLoggerKit.MonitoringLevel) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias AllCases = [CheckoutEventLoggerKit.MonitoringLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [CheckoutEventLoggerKit.MonitoringLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension CheckoutEventLoggerKit.Environment : Swift.Equatable {}
extension CheckoutEventLoggerKit.Environment : Swift.Hashable {}
extension CheckoutEventLoggerKit.CheckoutEventLogger.MetadataKey : Swift.Equatable {}
extension CheckoutEventLoggerKit.CheckoutEventLogger.MetadataKey : Swift.Hashable {}
extension CheckoutEventLoggerKit.CheckoutEventLogger.MetadataKey : Swift.RawRepresentable {}
extension CheckoutEventLoggerKit.MonitoringLevel : Swift.Hashable {}
extension CheckoutEventLoggerKit.MonitoringLevel : Swift.RawRepresentable {}
